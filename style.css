/*
Vamos estilizar o corpo da página e o container da prancheta.
A ideia é que o container tenha a imagem de fundo
e o canvas fique posicionado sobre a área branca dessa imagem.
*/
body {
    margin: 0;
    /*
    vh (Viewport Height) é uma unidade de medida relativa à altura da janela de visualização (viewport) do navegador.
    1vh equivale a 1% da altura da viewport.
    padding: 15vh; significa que o padding superior e inferior será 15% da altura da tela visível.
    */
    padding: 15vh 20px; /* Adiciona padding superior/inferior em vh e lateral em px */
    background-color: #fdd4ae; /* Cor de fundo padrão */
    display: block; /* Garante comportamento de bloco normal */
    min-height: 95vh; /* Garante que o body ocupe quase a altura total */
    font-family: 'Courier New', Courier, monospace; 
}

.main-layout-wrapper {
    display: flex; /* Organiza filhos (prancheta e botão) lado a lado */
    align-items: flex-start; /* Alinha os itens pelo topo */
    gap: 20px; /* Espaço entre a prancheta e os botões */
    flex-wrap: wrap; /* Permite que os itens quebrem para a próxima linha em telas menores */
    justify-content: center; /* Centraliza os itens DENTRO DO WRAPPER quando quebram */

    /* Centraliza o wrapper horizontalmente na página e move para baixo */
    max-width: 1200px; /* Define a largura máxima para centralizar */
    margin: 20px auto; /* 20px margem superior/inferior, auto para centralizar horizontalmente */
}

.prancheta-container {
    /*
    'position: relative;' é crucial aqui.
    Ele faz com que elementos filhos com 'position: absolute;'
    se posicionem em relação a este container, e não ao body ou à janela.
    Eso facilita muito posicionar o canvas sobre a imagem de fundo.
    */
    position: relative;
    width: 100%; /* Ocupa a largura disponível no wrapper */
    max-width: 1200px; /* Mas não ultrapassa um tamanho máximo */

    /* Adiciona a propriedade aspect-ratio para manter a proporção */
    /* Calcule a proporção: largura / altura da sua imagem de fundo */
    /* Se a imagem é 900px de largura por 520px de altura, a proporção é 900/520 */
    aspect-ratio: 900 / 520; /* Ou 45 / 26 (versão simplificada) */

    background-image: url('img/background.avif');
    background-size: contain ; /* Cobre a área do container sem distorcer muito */
    background-repeat: no-repeat; /* Não repete a imagem */
    background-position: center; /* Centraliza a imagem */
    box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* Uma sombrinha pra destacar */
    border-radius: 8px; /* Cantos arredondados */
    overflow: hidden; /* Mantenha */
    flex-shrink: 1; /* Permite que o item encolha se necessário */
}

#myCanvas {
    /*
    'position: absolute;' tira o canvas do fluxo normal do documento
    e permite posicioná-lo exatamente onde queremos dentro do container
    com 'position: relative;'.
    */
    position: absolute;
    /* Ajuste as posições e dimensões conforme a área branca da sua imagem */
    top: 27%;
    left: 25.1%;
    width: auto;
    height:50%;
    border: 1px solid #ccc; /* Uma borda leve pra gente ver onde o canvas está */
    background-color: rgba(255, 255, 255, 0.8); /* Fundo branco semi-transparente */
    cursor: crosshair; /* Ou pointer, ou até uma imagem customizada */
}

/*
A função clamp() permite definir um valor que é "grampeado" (clamped)
entre um valor mínimo e um valor máximo.
Ela é super útil para tipografia responsiva ou para dimensionar elementos
que precisam escalar, mas sem ficar muito pequenos ou muito grandes.

A sintaxe é: clamp(MIN, IDEAL, MAX)

Onde: */
#clearButton {
 font-size: clamp(8px, 1.8vw, 20px);
     /* clamp(MIN, IDEAL, MAX)

    MIN: O valor mínimo permitido. O valor calculado nunca será menor que este.
         Use uma unidade absoluta (como px) ou relativa (como rem, em, vw, vh).
         Exemplo: 16px (nunca menor que 16 pixels)

    IDEAL: O valor "preferido" ou "ideal". Este é o valor que o navegador
           tentará usar. Geralmente é uma unidade relativa (como vw ou vh)
           que escala com a viewport, ou uma unidade relativa ao elemento pai
           (como %). Este valor é o que torna o elemento responsivo.
           Exemplo: 3vw (3% da largura da viewport)

    MAX: O valor máximo permitido. O valor calculado nunca será maior que este.
         Assim como o MIN, use uma unidade absoluta ou relativa.
         Exemplo: 24px (nunca maior que 24 pixels)

    Como funciona:
    - Se o valor IDEAL for menor que MIN, clamp() usará MIN.
    - Se o valor IDEAL for maior que MAX, clamp() usará MAX.
    - Se o valor IDEAL estiver entre MIN e MAX, clamp() usará IDEAL.

    Isso significa que o valor final será sempre:
    max(MIN, min(IDEAL, MAX))
    */
   

    /*
    Neste exemplo específico:
    - O tamanho da fonte nunca será menor que 16 pixels (MIN).
    - O tamanho da fonte ideal é 3% da largura da viewport (IDEAL).
    - O tamanho da fonte nunca será maior que 24 pixels (MAX).

    Em telas estreitas, onde 3vw seria menor que 16px, a fonte será 16px.
    Em telas largas, onde 3vw seria maior que 24px, a fonte será 24px.
    Em telas de tamanho médio, onde 3vw está entre 16px e 24px, a fonte será 3vw
    e escalará suavemente com a largura da tela.
    */

    /*
    Aplicando ao seu caso com vh:
    Se você usou font-size: 0.6vh; e queria mínimo/máximo 1.8,
    talvez você quisesse algo como:

    font-size: clamp(1.8vh, 0.6vh, 1.8vh); -- Isso não faria sentido, pois o ideal (0.6vh)
                                           -- é menor que o mínimo (1.8vh), então sempre seria 1.8vh.

    Talvez você quisesse que o mínimo fosse 0.6vh e o máximo 1.8vh,
    e o valor ideal fosse baseado em algo como vw ou uma mistura?
    Exemplo: font-size: clamp(0.6vh, 2vw, 1.8vh);
    -- Neste caso, a fonte seria no mínimo 0.6vh, no máximo 1.8vh,
    -- e tentaria ser 2% da largura da tela quando esse valor estiver entre os limites.

    Ou talvez você quisesse que o valor ideal fosse 0.6vh, mas com limites em px?
    Exemplo: font-size: clamp(12px, 0.6vh, 20px);
    -- Mínimo 12px, ideal 0.6vh, máximo 20px.
    */
    /* Usando unidades relativas (em) para padding e font-size */
    font-weight: bold;
    padding: 0.6em 1.2em; /* Ajuste o padding usando em */
    cursor: pointer; /* Indica que é clicável */
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    transition: background-color 0.3s ease; /* Animação suave ao passar o mouse */
    min-width: 0;
}

#clearButton:hover {
    background-color: #0056b3; /* Cor mais escura ao passar o mouse */
}

.shapes-toolbar {
    display: flex;
    flex-direction: inherit;
    gap: 10px;
    background: #ffe9c9;
    padding: 12px 8px;
    border-radius: 7px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.7);
}

.shape-btn {
    font-size: clamp(20px, 2.5vw, 36px);
    padding: 0.25em 0.4em;
    background: #fff8eb;
    border: 2px solid #007bff;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s, border-color 0.3s;
    outline: none;
}

.shape-btn.active, .shape-btn.focus {
    background: #007bff;
    color: #fff;
    border-color: #0056b3;
}